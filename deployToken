#!/bin/bash

# GitLab Deploy Token Generator Script
# Usage: ./generate_deploy_token.sh <gitlab_repo_url> [token_name] [scopes] [expires_at] [yaml_file]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Function to show usage
show_usage() {
    echo "Usage: $0 <gitlab_repo_url> [token_name] [scopes] [expires_at]"
    echo ""
    echo "Parameters:"
    echo "  gitlab_repo_url  : GitLab repository URL (required)"
    echo "  token_name       : Name for the deploy token (optional, default: deploy-token-$(date +%Y%m%d))"
    echo "  scopes          : Comma-separated scopes (optional, default: read_repository)"
    echo "  expires_at      : Expiration date YYYY-MM-DD (optional, default: no expiry)"
    echo ""
    echo "Available scopes:"
    echo "  - read_repository    : Read repository"
    echo "  - read_registry      : Read container registry"
    echo "  - write_registry     : Write to container registry"
    echo ""
    echo "Environment variables required:"
    echo "  GITLAB_TOKEN        : Your GitLab personal access token"
    echo ""
    echo "Example:"
    echo "  export GITLAB_TOKEN='glpat-xxxxxxxxxxxxxxxxxxxx'"
    echo "  $0 https://gitlab.com/mygroup/myproject my-token read_repository,read_registry 2025-12-31"
}

# Check if help is requested
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    show_usage
    exit 0
fi

# Check if repo URL is provided
if [[ -z "$1" ]]; then
    print_error "Repository URL is required!"
    show_usage
    exit 1
fi

# Check if GitLab token is set
if [[ -z "$GITLAB_TOKEN" ]]; then
    print_error "GITLAB_TOKEN environment variable is not set!"
    echo "Please set your GitLab personal access token:"
    echo "export GITLAB_TOKEN='your_token_here'"
    exit 1
fi

REPO_URL="$1"
TOKEN_NAME="${2:-deploy-token-$(date +%Y%m%d)}"
SCOPES="${3:-read_repository}"
EXPIRES_AT="${4:-}"
YAML_FILE="${5:-deploy_tokens.yaml}"

print_info "Starting deploy token generation process..."
print_info "Repository URL: $REPO_URL"
print_info "Token name: $TOKEN_NAME"
print_info "Scopes: $SCOPES"
print_info "Expires at: ${EXPIRES_AT:-'No expiry'}"
print_info "YAML file: $YAML_FILE"

# Extract GitLab instance URL and project path from repo URL
if [[ $REPO_URL =~ ^https?://([^/]+)/(.+)\.git$ ]] || [[ $REPO_URL =~ ^https?://([^/]+)/(.+)$ ]]; then
    GITLAB_HOST="${BASH_REMATCH[1]}"
    PROJECT_PATH="${BASH_REMATCH[2]}"
    
    # Remove trailing .git if present
    PROJECT_PATH="${PROJECT_PATH%.git}"
else
    print_error "Invalid GitLab repository URL format!"
    echo "Expected format: https://gitlab.com/group/project or https://gitlab.com/group/project.git"
    exit 1
fi

GITLAB_API_URL="https://$GITLAB_HOST/api/v4"
print_info "GitLab instance: $GITLAB_HOST"
print_info "Project path: $PROJECT_PATH"

# URL encode the project path
PROJECT_PATH_ENCODED=$(printf '%s\n' "$PROJECT_PATH" | sed 's/\//%2F/g')

print_info "Fetching project information..."

# Get project information to verify access and get project ID
PROJECT_INFO=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    "$GITLAB_API_URL/projects/$PROJECT_PATH_ENCODED")

HTTP_STATUS=$(echo "$PROJECT_INFO" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
PROJECT_BODY=$(echo "$PROJECT_INFO" | sed -e 's/HTTPSTATUS:.*//g')

if [[ $HTTP_STATUS -ne 200 ]]; then
    print_error "Failed to fetch project information (HTTP $HTTP_STATUS)"
    if [[ $HTTP_STATUS -eq 401 ]]; then
        print_error "Authentication failed. Check your GITLAB_TOKEN."
    elif [[ $HTTP_STATUS -eq 404 ]]; then
        print_error "Project not found or you don't have access to it."
    else
        echo "Response: $PROJECT_BODY"
    fi
    exit 1
fi

# Extract project ID and name
PROJECT_ID=$(echo "$PROJECT_BODY" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
PROJECT_NAME=$(echo "$PROJECT_BODY" | grep -o '"name":"[^"]*"' | head -1 | cut -d'"' -f4)

if [[ -z "$PROJECT_ID" ]]; then
    print_error "Could not extract project ID from response"
    exit 1
fi

print_success "Found project: $PROJECT_NAME (ID: $PROJECT_ID)"

# Convert scopes to JSON array format
IFS=',' read -ra SCOPE_ARRAY <<< "$SCOPES"
SCOPES_JSON=""
for scope in "${SCOPE_ARRAY[@]}"; do
    scope=$(echo "$scope" | xargs) # trim whitespace
    if [[ -n "$SCOPES_JSON" ]]; then
        SCOPES_JSON="$SCOPES_JSON,"
    fi
    SCOPES_JSON="$SCOPES_JSON\"$scope\""
done

# Prepare JSON payload
JSON_PAYLOAD="{\"name\": \"$TOKEN_NAME\", \"scopes\": [$SCOPES_JSON]"
if [[ -n "$EXPIRES_AT" ]]; then
    JSON_PAYLOAD="$JSON_PAYLOAD, \"expires_at\": \"$EXPIRES_AT\""
fi
JSON_PAYLOAD="$JSON_PAYLOAD}"

print_info "Creating deploy token..."
print_info "Payload: $JSON_PAYLOAD"

# Create deploy token
TOKEN_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    --request POST \
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    --data "$JSON_PAYLOAD" \
    "$GITLAB_API_URL/projects/$PROJECT_ID/deploy_tokens")

HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
TOKEN_BODY=$(echo "$TOKEN_RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')

if [[ $HTTP_STATUS -ne 201 ]]; then
    print_error "Failed to create deploy token (HTTP $HTTP_STATUS)"
    if [[ $HTTP_STATUS -eq 403 ]]; then
        print_error "Insufficient permissions. You need at least Maintainer role."
    elif [[ $HTTP_STATUS -eq 400 ]]; then
        print_error "Bad request. Check your parameters."
        echo "Response: $TOKEN_BODY"
    else
        echo "Response: $TOKEN_BODY"
    fi
    exit 1
fi

# Extract token information
TOKEN_ID=$(echo "$TOKEN_BODY" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
TOKEN_USERNAME=$(echo "$TOKEN_BODY" | grep -o '"username":"[^"]*"' | head -1 | cut -d'"' -f4)
TOKEN_VALUE=$(echo "$TOKEN_BODY" | grep -o '"token":"[^"]*"' | head -1 | cut -d'"' -f4)
TOKEN_EXPIRES=$(echo "$TOKEN_BODY" | grep -o '"expires_at":"[^"]*"' | head -1 | cut -d'"' -f4)

print_success "Deploy token created successfully!"

# Function to save token to YAML file
save_to_yaml() {
    local url="$1"
    local token_data="$2"
    local yaml_file="$3"
    
    # Extract token value from token response
    local token_value=$(echo "$token_data" | grep -o '"token":"[^"]*"' | head -1 | cut -d'"' -f4)
    
    # Initialize YAML file if it doesn't exist (no header needed for this format)
    if [[ ! -f "$yaml_file" ]]; then
        touch "$yaml_file"
        print_info "Created new YAML file: $yaml_file"
    fi
    
    # Append token data to YAML file in simple format
    cat >> "$yaml_file" << EOF
- url: $url
  deploy_token: $token_value
EOF
}

# Save token to YAML file
print_info "Saving token to YAML file: $YAML_FILE"
save_to_yaml "$REPO_URL" "$TOKEN_BODY" "$YAML_FILE"
print_success "Token saved to $YAML_FILE"

echo ""
echo "=== DEPLOY TOKEN DETAILS ==="
echo "Token ID: $TOKEN_ID"
echo "Token Name: $TOKEN_NAME"
echo "Username: $TOKEN_USERNAME"
echo "Token: $TOKEN_VALUE"
echo "Expires: ${TOKEN_EXPIRES:-'No expiry'}"
echo "Scopes: $SCOPES"
echo ""

print_warning "IMPORTANT: Save the token value now! It won't be shown again."
print_success "All token details have been saved to $YAML_FILE"

echo "=== USAGE EXAMPLES ==="
echo ""
echo "# Clone repository using deploy token:"
echo "git clone https://$TOKEN_USERNAME:$TOKEN_VALUE@$GITLAB_HOST/$PROJECT_PATH.git"
echo ""
echo "# Add as remote:"
echo "git remote add deploy https://$TOKEN_USERNAME:$TOKEN_VALUE@$GITLAB_HOST/$PROJECT_PATH.git"
echo ""
echo "# Docker login (if read_registry scope enabled):"
echo "echo $TOKEN_VALUE | docker login $GITLAB_HOST -u $TOKEN_USERNAME --password-stdin"

print_success "Script completed successfully!"
