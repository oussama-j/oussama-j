#!/bin/bash

# GitLab Deploy Token Generator Script - Git Bash Compatible
# Usage: ./generate_deploy_token.sh <gitlab_repo_url> [token_name] [scopes] [expires_at] [yaml_file]

set -e

# Colors for output (simplified for Git Bash)
if [[ -t 1 ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m'
else
    RED=''
    GREEN=''
    YELLOW=''
    BLUE=''
    NC=''
fi

# Check if help is requested
if [[ "$1" == "-h" || "$1" == "--help" || -z "$1" ]]; then
    echo "Usage: $0 <gitlab_repo_url> [token_name] [scopes] [expires_at] [yaml_file]"
    echo ""
    echo "Parameters:"
    echo "  gitlab_repo_url  : GitLab repository URL (required)"
    echo "  token_name       : Name for the deploy token (optional, default: deploy-token-YYYYMMDD)"
    echo "  scopes          : Comma-separated scopes (optional, default: read_repository)"
    echo "  expires_at      : Expiration date YYYY-MM-DD (optional, default: no expiry)"
    echo "  yaml_file       : YAML file to store tokens (optional, default: deploy_tokens.yaml)"
    echo ""
    echo "Available scopes:"
    echo "  - read_repository    : Read repository"
    echo "  - read_registry      : Read container registry" 
    echo "  - write_registry     : Write to container registry"
    echo ""
    echo "Environment variables required:"
    echo "  GITLAB_TOKEN        : Your GitLab personal access token"
    echo ""
    echo "Example:"
    echo "  export GITLAB_TOKEN='glpat-xxxxxxxxxxxxxxxxxxxx'"
    echo "  $0 https://gitlab.com/mygroup/myproject my-token read_repository \"\" tokens.yaml"
    echo ""
    echo "Bulk processing example:"
    echo "  for url in \$(cat repo_urls.txt); do"
    echo "    ./generate_deploy_token.sh \"\$url\""
    echo "  done"
    exit 0
fi

# Check if GitLab token is set
if [[ -z "$GITLAB_TOKEN" ]]; then
    echo -e "${RED}[ERROR]${NC} GITLAB_TOKEN environment variable is not set!"
    echo "Please set your GitLab personal access token:"
    echo "export GITLAB_TOKEN='your_token_here'"
    exit 1
fi

REPO_URL="$1"
# Use Windows-compatible date command
if command -v date >/dev/null 2>&1; then
    DEFAULT_TOKEN_NAME="deploy-token-$(date +%Y%m%d 2>/dev/null || echo "$(date)")"
else
    DEFAULT_TOKEN_NAME="deploy-token"
fi
TOKEN_NAME="${2:-$DEFAULT_TOKEN_NAME}"
SCOPES="${3:-read_repository}"
EXPIRES_AT="$4"
YAML_FILE="${5:-deploy_tokens.yaml}"

echo -e "${BLUE}[INFO]${NC} Starting deploy token generation process..."
echo -e "${BLUE}[INFO]${NC} Repository URL: $REPO_URL"
echo -e "${BLUE}[INFO]${NC} Token name: $TOKEN_NAME"
echo -e "${BLUE}[INFO]${NC} Scopes: $SCOPES"
if [[ -n "$EXPIRES_AT" ]]; then
    echo -e "${BLUE}[INFO]${NC} Expires at: $EXPIRES_AT"
else
    echo -e "${BLUE}[INFO]${NC} Expires at: No expiry"
fi
echo -e "${BLUE}[INFO]${NC} YAML file: $YAML_FILE"

# Extract GitLab instance URL and project path from repo URL
if [[ $REPO_URL =~ https?://([^/]+)/(.+)\.git$ ]] || [[ $REPO_URL =~ https?://([^/]+)/(.+)$ ]]; then
    GITLAB_HOST="${BASH_REMATCH[1]}"
    PROJECT_PATH="${BASH_REMATCH[2]}"
    
    # Remove trailing .git if present
    PROJECT_PATH="${PROJECT_PATH%.git}"
else
    echo -e "${RED}[ERROR]${NC} Invalid GitLab repository URL format!"
    echo "Expected format: https://gitlab.com/group/project or https://gitlab.com/group/project.git"
    exit 1
fi

GITLAB_API_URL="https://$GITLAB_HOST/api/v4"
echo -e "${BLUE}[INFO]${NC} GitLab instance: $GITLAB_HOST"
echo -e "${BLUE}[INFO]${NC} Project path: $PROJECT_PATH"

# URL encode the project path (replace / with %2F)
PROJECT_PATH_ENCODED=$(echo "$PROJECT_PATH" | sed 's/\//%2F/g')

echo -e "${BLUE}[INFO]${NC} Fetching project information..."

# Get project information to verify access and get project ID
PROJECT_INFO=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    "$GITLAB_API_URL/projects/$PROJECT_PATH_ENCODED")

HTTP_STATUS=$(echo "$PROJECT_INFO" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
PROJECT_BODY=$(echo "$PROJECT_INFO" | sed -e 's/HTTPSTATUS:.*//g')

if [[ $HTTP_STATUS -ne 200 ]]; then
    echo -e "${RED}[ERROR]${NC} Failed to fetch project information (HTTP $HTTP_STATUS)"
    if [[ $HTTP_STATUS -eq 401 ]]; then
        echo -e "${RED}[ERROR]${NC} Authentication failed. Check your GITLAB_TOKEN."
    elif [[ $HTTP_STATUS -eq 404 ]]; then
        echo -e "${RED}[ERROR]${NC} Project not found or you don't have access to it."
    else
        echo "Response: $PROJECT_BODY"
    fi
    exit 1
fi

# Extract project ID using grep and cut (more compatible)
PROJECT_ID=$(echo "$PROJECT_BODY" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
PROJECT_NAME=$(echo "$PROJECT_BODY" | grep -o '"name":"[^"]*"' | head -1 | cut -d'"' -f4)

if [[ -z "$PROJECT_ID" ]]; then
    echo -e "${RED}[ERROR]${NC} Could not extract project ID from response"
    exit 1
fi

echo -e "${GREEN}[SUCCESS]${NC} Found project: $PROJECT_NAME (ID: $PROJECT_ID)"

# Convert scopes to JSON array format
IFS=',' read -ra SCOPE_ARRAY <<< "$SCOPES"
SCOPES_JSON=""
for scope in "${SCOPE_ARRAY[@]}"; do
    # Trim whitespace
    scope=$(echo "$scope" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    if [[ -n "$SCOPES_JSON" ]]; then
        SCOPES_JSON="$SCOPES_JSON,"
    fi
    SCOPES_JSON="$SCOPES_JSON\"$scope\""
done

# Prepare JSON payload
JSON_PAYLOAD="{\"name\": \"$TOKEN_NAME\", \"scopes\": [$SCOPES_JSON]"
if [[ -n "$EXPIRES_AT" ]]; then
    JSON_PAYLOAD="$JSON_PAYLOAD, \"expires_at\": \"$EXPIRES_AT\""
fi
JSON_PAYLOAD="$JSON_PAYLOAD}"

echo -e "${BLUE}[INFO]${NC} Creating deploy token..."

# Create deploy token
TOKEN_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
    --request POST \
    --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
    --header "Content-Type: application/json" \
    --data "$JSON_PAYLOAD" \
    "$GITLAB_API_URL/projects/$PROJECT_ID/deploy_tokens")

HTTP_STATUS=$(echo "$TOKEN_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
TOKEN_BODY=$(echo "$TOKEN_RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')

if [[ $HTTP_STATUS -ne 201 ]]; then
    echo -e "${RED}[ERROR]${NC} Failed to create deploy token (HTTP $HTTP_STATUS)"
    if [[ $HTTP_STATUS -eq 403 ]]; then
        echo -e "${RED}[ERROR]${NC} Insufficient permissions. You need at least Maintainer role."
    elif [[ $HTTP_STATUS -eq 400 ]]; then
        echo -e "${RED}[ERROR]${NC} Bad request. Check your parameters."
        echo "Response: $TOKEN_BODY"
    else
        echo "Response: $TOKEN_BODY"
    fi
    exit 1
fi

# Extract token information
TOKEN_ID=$(echo "$TOKEN_BODY" | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)
TOKEN_USERNAME=$(echo "$TOKEN_BODY" | grep -o '"username":"[^"]*"' | head -1 | cut -d'"' -f4)
TOKEN_VALUE=$(echo "$TOKEN_BODY" | grep -o '"token":"[^"]*"' | head -1 | cut -d'"' -f4)
TOKEN_EXPIRES=$(echo "$TOKEN_BODY" | grep -o '"expires_at":"[^"]*"' | head -1 | cut -d'"' -f4)

echo -e "${GREEN}[SUCCESS]${NC} Deploy token created successfully!"

# Save to YAML file in simple format
echo -e "${BLUE}[INFO]${NC} Saving token to YAML file: $YAML_FILE"

# Initialize YAML file if it doesn't exist
if [[ ! -f "$YAML_FILE" ]]; then
    touch "$YAML_FILE"
    echo -e "${BLUE}[INFO]${NC} Created new YAML file: $YAML_FILE"
fi

# Append token data to YAML file
cat >> "$YAML_FILE" << EOF
- url: $REPO_URL
  deploy_token: $TOKEN_VALUE
EOF

echo -e "${GREEN}[SUCCESS]${NC} Token saved to $YAML_FILE"

echo ""
echo "=== DEPLOY TOKEN DETAILS ==="
echo "Token ID: $TOKEN_ID"
echo "Token Name: $TOKEN_NAME"
echo "Username: $TOKEN_USERNAME"
echo "Token: $TOKEN_VALUE"
if [[ -n "$TOKEN_EXPIRES" && "$TOKEN_EXPIRES" != "null" ]]; then
    echo "Expires: $TOKEN_EXPIRES"
else
    echo "Expires: No expiry"
fi
echo "Scopes: $SCOPES"
echo ""

echo -e "${YELLOW}[WARNING]${NC} IMPORTANT: Save the token value now! It won't be shown again."
echo -e "${GREEN}[SUCCESS]${NC} Token details have been saved to $YAML_FILE"

echo ""
echo "=== USAGE EXAMPLES ==="
echo ""
echo "# Clone repository using deploy token:"
echo "git clone https://$TOKEN_USERNAME:$TOKEN_VALUE@$GITLAB_HOST/$PROJECT_PATH.git"
echo ""
echo "# Add as remote:"
echo "git remote add deploy https://$TOKEN_USERNAME:$TOKEN_VALUE@$GITLAB_HOST/$PROJECT_PATH.git"
echo ""
echo "# Docker login (if read_registry scope enabled):"
echo "echo $TOKEN_VALUE | docker login $GITLAB_HOST -u $TOKEN_USERNAME --password-stdin"

echo -e "${GREEN}[SUCCESS]${NC} Script completed successfully!"
